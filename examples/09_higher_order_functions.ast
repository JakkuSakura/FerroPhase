ast::File {
  items:
    priv import std::fmt::Display
    priv import std::ops::Add
    priv fn<T: Add + Display> apply(a: Expr(T), b: Expr(T), op: fn(Expr(T), Expr(T)) -> Expr(T)) -> () : fn<T: Add + Display>(unknown, unknown, fn(unknown, unknown) -> unknown) -> ()
      block (1 stmt)
        expr_stmt ;
          intrinsic println
            template: "{}" op(a, b)
    priv fn<T: Add> add(a: Expr(T), b: Expr(T)) -> Expr(T) : fn<T: Add>(unknown, unknown) -> unknown
      binop +
        lhs:
          locator a
        rhs:
          locator b
    priv fn apply_if(cond: Expr(bool), a: i64, b: i64, op: fn(i64, i64) -> i64) -> i64 : fn(bool, i64, i64, fn(i64, i64) -> i64) -> i64
      if
        cond:
          locator cond
        then:
          invoke
            target: op
            args:
              locator a
              locator b
        else:
          value 0
    priv fn make_adder(n: i64) -> impl Fn : fn(i64) -> fn(i64) -> i64
      closure (x : unknown)
        binop +
          lhs:
            locator x
          rhs:
            locator n
    priv fn main() -> () : fn() -> ()
      block (11 stmts)
        expr_stmt ;
          intrinsic println
            template: "Generic operations:"
        expr_stmt ;
          invoke
            target: apply
            args:
              value 10
              value 20
              locator add
        expr_stmt ;
          invoke
            target: apply
            args:
              value 1.5
              value 2.5
              locator add
        expr_stmt ;
          intrinsic println
            template: "
Conditional:"
        expr_stmt ;
          intrinsic println
            template: "{}" apply_if(true, 5, 3, add)
        expr_stmt ;
          intrinsic println
            template: "{}" apply_if(false, 5, 3, add)
        expr_stmt ;
          intrinsic println
            template: "
Closure factory:"
        priv const add_10: fn(i64) -> i64
          invoke
            target: make_adder
            args:
              value 10
        expr_stmt ;
          intrinsic println
            template: "add_10(5) = {}" add_10(5)
        let double : unknown
          init:
            closure (x : unknown)
              binop *
                lhs:
                  locator x
                rhs:
                  value 2
        expr_stmt ;
          intrinsic println
            template: "double(7) = {}" double(7)
}
