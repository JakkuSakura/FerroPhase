lir::Program {
    functions:
        fn new(arg0: i64, arg1: i64) -> { i64, i64 } [cc: c, linkage: internal] {
            locals:
                %0: { i64, i64 }
                %1: i64 // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i0: %r0 = alloca i32 1 align 8 : ptr { i64, i64 }
                i1: %r1 = insertvalue undef { i64, i64 }, %local1, [0] : { i64, i64 }
                i2: %r2 = insertvalue %r1, %local2, [1] : { i64, i64 }
                i3: store %r2, %r0 align 8
                terminator: ret %r2
        }

        fn translate(arg0: ptr { i64, i64 }, arg1: i64, arg2: i64) -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: ptr { i64, i64 } // arg
                %2: i64 // arg
                %3: i64 // arg
            bb0 // label: bb0:
                i4: %r4 = bitcast %local1 to ptr i64 : ptr i64
                i5: %r5 = bitcast %local1 to ptr i64 : ptr i64
                i6: %r6 = load %r5 align 8 : i64
                i7: %r7 = add %r6, %local2 : i64
                i8: store %r7, %r4 align 8
                i9: %r9 = bitcast %local1 to ptr i8 : ptr i8
                i10: %r10 = gep inbounds %r9 [i64 8] : ptr i8
                i11: %r11 = bitcast %r10 to ptr i64 : ptr i64
                i12: %r12 = bitcast %local1 to ptr i8 : ptr i8
                i13: %r13 = gep inbounds %r12 [i64 8] : ptr i8
                i14: %r14 = bitcast %r13 to ptr i64 : ptr i64
                i15: %r15 = load %r14 align 8 : i64
                i16: %r16 = add %r15, %local3 : i64
                i17: store %r16, %r11 align 8
                terminator: ret void
        }

        fn distance2(arg0: ptr { i64, i64 }, arg1: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: ptr { i64, i64 } // arg
                %2: ptr { i64, i64 } // arg
                %3: void
                %4: i64
                %5: void
                %6: i64
                %7: void
                %8: void
                %9: void
                %10: void
                %11: void
            bb0 // label: bb0:
                i18: %r18 = alloca i32 1 align 8 : ptr i64
                i19: %r19 = bitcast %local1 to ptr i64 : ptr i64
                i20: %r20 = load %r19 align 8 : i64
                i21: %r21 = bitcast %local2 to ptr i64 : ptr i64
                i22: %r22 = load %r21 align 8 : i64
                i23: %r23 = sub %r20, %r22 : i64
                i24: store %r23, %r18 align 8
                i25: %r25 = load %r18 align 8 : i64
                i26: %r26 = alloca i32 1 align 8 : ptr i64
                i27: %r27 = bitcast %local1 to ptr i8 : ptr i8
                i28: %r28 = gep inbounds %r27 [i64 8] : ptr i8
                i29: %r29 = bitcast %r28 to ptr i64 : ptr i64
                i30: %r30 = load %r29 align 8 : i64
                i31: %r31 = bitcast %local2 to ptr i8 : ptr i8
                i32: %r32 = gep inbounds %r31 [i64 8] : ptr i8
                i33: %r33 = bitcast %r32 to ptr i64 : ptr i64
                i34: %r34 = load %r33 align 8 : i64
                i35: %r35 = sub %r30, %r34 : i64
                i36: store %r35, %r26 align 8
                i37: %r37 = load %r26 align 8 : i64
                i38: %r38 = mul %r25, %r25 : void
                i39: %r39 = mul %r37, %r37 : void
                i40: %r40 = add %r38, %r39 : void
                i41: %r41 = mul %r25, %r25 : void
                i42: %r42 = mul %r37, %r37 : void
                i43: %r43 = add %r41, %r42 : void
                terminator: ret %r43
        }

        fn new__1(arg0: i64, arg1: i64) -> { i64, i64 } [cc: c, linkage: internal] {
            locals:
                %0: { i64, i64 }
                %1: i64 // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i44: %r44 = alloca i32 1 align 8 : ptr { i64, i64 }
                i45: %r45 = insertvalue undef { i64, i64 }, %local1, [0] : { i64, i64 }
                i46: %r46 = insertvalue %r45, %local2, [1] : { i64, i64 }
                i47: store %r46, %r44 align 8
                terminator: ret %r46
        }

        fn area(arg0: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: ptr { i64, i64 } // arg
            bb0 // label: bb0:
                i48: %r48 = alloca i32 1 align 8 : ptr i64
                i49: %r49 = bitcast %local1 to ptr i64 : ptr i64
                i50: %r50 = load %r49 align 8 : i64
                i51: %r51 = bitcast %local1 to ptr i8 : ptr i8
                i52: %r52 = gep inbounds %r51 [i64 8] : ptr i8
                i53: %r53 = bitcast %r52 to ptr i64 : ptr i64
                i54: %r54 = load %r53 align 8 : i64
                i55: %r55 = mul %r50, %r54 : i64
                i56: store %r55, %r48 align 8
                terminator: ret %r55
        }

        fn perimeter(arg0: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: ptr { i64, i64 } // arg
                %2: i64
            bb0 // label: bb0:
                i57: %r57 = alloca i32 1 align 8 : ptr i64
                i58: %r58 = alloca i32 1 align 8 : ptr i64
                i59: %r59 = bitcast %local1 to ptr i64 : ptr i64
                i60: %r60 = load %r59 align 8 : i64
                i61: %r61 = bitcast %local1 to ptr i8 : ptr i8
                i62: %r62 = gep inbounds %r61 [i64 8] : ptr i8
                i63: %r63 = bitcast %r62 to ptr i64 : ptr i64
                i64: %r64 = load %r63 align 8 : i64
                i65: %r65 = add %r60, %r64 : i64
                i66: store %r65, %r58 align 8
                i67: %r67 = load %r58 align 8 : i64
                i68: %r68 = mul i64 2, %r67 : i64
                i69: store %r68, %r57 align 8
                terminator: ret %r68
        }

        fn is_square(arg0: ptr { i64, i64 }) -> i1 [cc: c, linkage: internal] {
            locals:
                %0: i1
                %1: ptr { i64, i64 } // arg
            bb0 // label: bb0:
                i70: %r70 = alloca i32 1 align 1 : ptr i1
                i71: %r71 = bitcast %local1 to ptr i64 : ptr i64
                i72: %r72 = load %r71 align 8 : i64
                i73: %r73 = bitcast %local1 to ptr i8 : ptr i8
                i74: %r74 = gep inbounds %r73 [i64 8] : ptr i8
                i75: %r75 = bitcast %r74 to ptr i64 : ptr i64
                i76: %r76 = load %r75 align 8 : i64
                i77: %r77 = eq %r72, %r76 : i1
                i78: store %r77, %r70 align 1
                terminator: ret %r77
        }

        fn main() -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: i32
                %2: { i64, i64 }
                %3: { i64, i64 }
                %4: i32
                %5: i32
                %6: void
                %7: ptr { i64, i64 }
                %8: i64
                %9: i32
                %10: i64
                %11: ptr { i64, i64 }
                %12: ptr { i64, i64 }
                %13: i32
                %14: { i64, i64 }
                %15: i32
                %16: i64
                %17: ptr { i64, i64 }
                %18: i32
                %19: i64
                %20: ptr { i64, i64 }
                %21: i32
                %22: i1
                %23: ptr { i64, i64 }
                %24: i32
            bb0 // label: bb0 // succs: [bb1]:
                i79: %r79 = call c @printf(c"=== Struct Operations ===
") : i32
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i80: %r80 = call c @new__1(i64 10, i64 20) : { i64, i64 }
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1] // succs: [bb3]:
                i81: %r81 = call c @new__1(i64 5, i64 15) : { i64, i64 }
                terminator: br bb3
            bb3 // label: bb3 // preds: [bb2] // succs: [bb4]:
                i82: %r82 = alloca i32 1 align 8 : ptr { i64, i64 }
                i83: store %r80, %r82 align 8
                i84: %r84 = bitcast %r82 to ptr i64 : ptr i64
                i85: %r85 = load %r84 align 8 : i64
                i86: %r86 = alloca i32 1 align 8 : ptr { i64, i64 }
                i87: store %r80, %r86 align 8
                i88: %r88 = bitcast %r86 to ptr i8 : ptr i8
                i89: %r89 = gep inbounds %r88 [i64 8] : ptr i8
                i90: %r90 = bitcast %r89 to ptr i64 : ptr i64
                i91: %r91 = load %r90 align 8 : i64
                i92: %r92 = call c @printf(c"p1 = (%d, %d)
", %r85, %r91) : i32
                terminator: br bb4
            bb4 // label: bb4 // preds: [bb3] // succs: [bb5]:
                i93: %r93 = alloca i32 1 align 8 : ptr { i64, i64 }
                i94: store %r81, %r93 align 8
                i95: %r95 = bitcast %r93 to ptr i64 : ptr i64
                i96: %r96 = load %r95 align 8 : i64
                i97: %r97 = alloca i32 1 align 8 : ptr { i64, i64 }
                i98: store %r81, %r97 align 8
                i99: %r99 = bitcast %r97 to ptr i8 : ptr i8
                i100: %r100 = gep inbounds %r99 [i64 8] : ptr i8
                i101: %r101 = bitcast %r100 to ptr i64 : ptr i64
                i102: %r102 = load %r101 align 8 : i64
                i103: %r103 = call c @printf(c"p2 = (%d, %d)
", %r96, %r102) : i32
                terminator: br bb5
            bb5 // label: bb5 // preds: [bb4] // succs: [bb6]:
                i104: %r104 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i105: store %r80, %r104 align 8
                i106: %r106 = alloca i32 1 align 8 : ptr i64
                i107: %r107 = sub i64 0, i64 4 : i64
                i108: store %r107, %r106 align 8
                i109: %r109 = load %r106 align 8 : i64
                i110: %r110 = call c @translate(%r104, i64 3, %r109)
                terminator: br bb6
            bb6 // label: bb6 // preds: [bb5] // succs: [bb7]:
                i111: %r111 = alloca i32 1 align 8 : ptr { i64, i64 }
                i112: store %r80, %r111 align 8
                i113: %r113 = bitcast %r111 to ptr i64 : ptr i64
                i114: %r114 = load %r113 align 8 : i64
                i115: %r115 = alloca i32 1 align 8 : ptr { i64, i64 }
                i116: store %r80, %r115 align 8
                i117: %r117 = bitcast %r115 to ptr i8 : ptr i8
                i118: %r118 = gep inbounds %r117 [i64 8] : ptr i8
                i119: %r119 = bitcast %r118 to ptr i64 : ptr i64
                i120: %r120 = load %r119 align 8 : i64
                i121: %r121 = call c @printf(c"p1 after translate = (%d, %d)
", %r114, %r120) : i32
                terminator: br bb7
            bb7 // label: bb7 // preds: [bb6] // succs: [bb8]:
                i122: %r122 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i123: store %r80, %r122 align 8
                i124: %r124 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i125: store %r81, %r124 align 8
                i126: %r126 = call c @distance2(%r122, %r124) : i64
                terminator: br bb8
            bb8 // label: bb8 // preds: [bb7] // succs: [bb9]:
                i127: %r127 = call c @printf(c"Distance²(p1, p2) = %d
", %r126) : i32
                terminator: br bb9
            bb9 // label: bb9 // preds: [bb8] // succs: [bb10]:
                i128: %r128 = call c @new__1(i64 10, i64 5) : { i64, i64 }
                terminator: br bb10
            bb10 // label: bb10 // preds: [bb9] // succs: [bb11]:
                i129: %r129 = alloca i32 1 align 8 : ptr { i64, i64 }
                i130: store %r128, %r129 align 8
                i131: %r131 = bitcast %r129 to ptr i64 : ptr i64
                i132: %r132 = load %r131 align 8 : i64
                i133: %r133 = alloca i32 1 align 8 : ptr { i64, i64 }
                i134: store %r128, %r133 align 8
                i135: %r135 = bitcast %r133 to ptr i8 : ptr i8
                i136: %r136 = gep inbounds %r135 [i64 8] : ptr i8
                i137: %r137 = bitcast %r136 to ptr i64 : ptr i64
                i138: %r138 = load %r137 align 8 : i64
                i139: %r139 = call c @printf(c"Rectangle: %d×%d
", %r132, %r138) : i32
                terminator: br bb11
            bb11 // label: bb11 // preds: [bb10] // succs: [bb12]:
                i140: %r140 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i141: store %r128, %r140 align 8
                i142: %r142 = call c @area(%r140) : i64
                terminator: br bb12
            bb12 // label: bb12 // preds: [bb11] // succs: [bb13]:
                i143: %r143 = call c @printf(c"  area = %d
", %r142) : i32
                terminator: br bb13
            bb13 // label: bb13 // preds: [bb12] // succs: [bb14]:
                i144: %r144 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i145: store %r128, %r144 align 8
                i146: %r146 = call c @perimeter(%r144) : i64
                terminator: br bb14
            bb14 // label: bb14 // preds: [bb13] // succs: [bb15]:
                i147: %r147 = call c @printf(c"  perimeter = %d
", %r146) : i32
                terminator: br bb15
            bb15 // label: bb15 // preds: [bb14] // succs: [bb16]:
                i148: %r148 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i149: store %r128, %r148 align 8
                i150: %r150 = call c @is_square(%r148) : i1
                terminator: br bb16
            bb16 // label: bb16 // preds: [bb15] // succs: [bb17]:
                i151: %r151 = zext %r150 to i32 : i32
                i152: %r152 = call c @printf(c"  is_square = %d
", %r151) : i32
                terminator: br bb17
            bb17 // label: bb17 // preds: [bb16]:
                terminator: ret void
        }
}
