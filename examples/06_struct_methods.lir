lir::Program {
    functions:
        fn new(arg0: i64, arg1: i64) -> { i64, i64 } [cc: c, linkage: internal] {
            locals:
                %0: { i64, i64 }
                %1: i64 // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i0: %r0 = alloca i32 1 align 8 : ptr { i64, i64 }
                i1: %r1 = insertvalue undef { i64, i64 }, %local1, [0] : { i64, i64 }
                i2: %r2 = insertvalue %r1, %local2, [1] : { i64, i64 }
                i3: store %r2, %r0 align 8
                terminator: ret %r2
        }

        fn translate(arg0: ptr { i64, i64 }, arg1: i64, arg2: i64) -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: ptr { i64, i64 } // arg
                %2: i64 // arg
                %3: i64 // arg
            bb0 // label: bb0:
                i4: %r4 = bitcast %local1 to ptr i64 : ptr i64
                i5: %r5 = bitcast %local1 to ptr i64 : ptr i64
                i6: %r6 = load %r5 align 8 : i64
                i7: %r7 = add %r6, %local2 : i64
                i8: store %r7, %r4 align 8
                i9: %r9 = bitcast %local1 to ptr i8 : ptr i8
                i10: %r10 = gep inbounds %r9 [i64 8] : ptr i8
                i11: %r11 = bitcast %r10 to ptr i64 : ptr i64
                i12: %r12 = bitcast %local1 to ptr i8 : ptr i8
                i13: %r13 = gep inbounds %r12 [i64 8] : ptr i8
                i14: %r14 = bitcast %r13 to ptr i64 : ptr i64
                i15: %r15 = load %r14 align 8 : i64
                i16: %r16 = add %r15, %local3 : i64
                i17: store %r16, %r11 align 8
                terminator: ret void
        }

        fn distance2(arg0: ptr { i64, i64 }, arg1: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: ptr { i64, i64 } // arg
                %2: ptr { i64, i64 } // arg
                %3: i64
                %4: i64
                %5: i64
                %6: i64
                %7: i64
                %8: i64
                %9: i64
                %10: i64
                %11: i64
            bb0 // label: bb0:
                i18: %r18 = alloca i32 1 align 8 : ptr i64
                i19: %r19 = alloca i32 1 align 8 : ptr i64
                i20: %r20 = bitcast %local1 to ptr i64 : ptr i64
                i21: %r21 = load %r20 align 8 : i64
                i22: %r22 = bitcast %local2 to ptr i64 : ptr i64
                i23: %r23 = load %r22 align 8 : i64
                i24: %r24 = sub %r21, %r23 : i64
                i25: store %r24, %r19 align 8
                i26: %r26 = alloca i32 1 align 8 : ptr i64
                i27: %r27 = load %r19 align 8 : i64
                i28: store %r27, %r26 align 8
                i29: %r29 = alloca i32 1 align 8 : ptr i64
                i30: %r30 = bitcast %local1 to ptr i8 : ptr i8
                i31: %r31 = gep inbounds %r30 [i64 8] : ptr i8
                i32: %r32 = bitcast %r31 to ptr i64 : ptr i64
                i33: %r33 = load %r32 align 8 : i64
                i34: %r34 = bitcast %local2 to ptr i8 : ptr i8
                i35: %r35 = gep inbounds %r34 [i64 8] : ptr i8
                i36: %r36 = bitcast %r35 to ptr i64 : ptr i64
                i37: %r37 = load %r36 align 8 : i64
                i38: %r38 = sub %r33, %r37 : i64
                i39: store %r38, %r29 align 8
                i40: %r40 = alloca i32 1 align 8 : ptr i64
                i41: %r41 = load %r29 align 8 : i64
                i42: store %r41, %r40 align 8
                i43: %r43 = alloca i32 1 align 8 : ptr i64
                i44: %r44 = load %r26 align 8 : i64
                i45: %r45 = load %r26 align 8 : i64
                i46: %r46 = mul %r44, %r45 : i64
                i47: store %r46, %r43 align 8
                i48: %r48 = alloca i32 1 align 8 : ptr i64
                i49: %r49 = load %r40 align 8 : i64
                i50: %r50 = load %r40 align 8 : i64
                i51: %r51 = mul %r49, %r50 : i64
                i52: store %r51, %r48 align 8
                i53: %r53 = alloca i32 1 align 8 : ptr i64
                i54: %r54 = load %r43 align 8 : i64
                i55: %r55 = load %r48 align 8 : i64
                i56: %r56 = add %r54, %r55 : i64
                i57: store %r56, %r53 align 8
                i58: %r58 = alloca i32 1 align 8 : ptr i64
                i59: %r59 = load %r26 align 8 : i64
                i60: %r60 = load %r26 align 8 : i64
                i61: %r61 = mul %r59, %r60 : i64
                i62: store %r61, %r58 align 8
                i63: %r63 = alloca i32 1 align 8 : ptr i64
                i64: %r64 = load %r40 align 8 : i64
                i65: %r65 = load %r40 align 8 : i64
                i66: %r66 = mul %r64, %r65 : i64
                i67: store %r66, %r63 align 8
                i68: %r68 = load %r58 align 8 : i64
                i69: %r69 = load %r63 align 8 : i64
                i70: %r70 = add %r68, %r69 : i64
                i71: store %r70, %r18 align 8
                terminator: ret %r70
        }

        fn new__1(arg0: i64, arg1: i64) -> { i64, i64 } [cc: c, linkage: internal] {
            locals:
                %0: { i64, i64 }
                %1: i64 // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i72: %r72 = alloca i32 1 align 8 : ptr { i64, i64 }
                i73: %r73 = insertvalue undef { i64, i64 }, %local1, [0] : { i64, i64 }
                i74: %r74 = insertvalue %r73, %local2, [1] : { i64, i64 }
                i75: store %r74, %r72 align 8
                terminator: ret %r74
        }

        fn area(arg0: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: ptr { i64, i64 } // arg
            bb0 // label: bb0:
                i76: %r76 = alloca i32 1 align 8 : ptr i64
                i77: %r77 = bitcast %local1 to ptr i64 : ptr i64
                i78: %r78 = load %r77 align 8 : i64
                i79: %r79 = bitcast %local1 to ptr i8 : ptr i8
                i80: %r80 = gep inbounds %r79 [i64 8] : ptr i8
                i81: %r81 = bitcast %r80 to ptr i64 : ptr i64
                i82: %r82 = load %r81 align 8 : i64
                i83: %r83 = mul %r78, %r82 : i64
                i84: store %r83, %r76 align 8
                terminator: ret %r83
        }

        fn perimeter(arg0: ptr { i64, i64 }) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: ptr { i64, i64 } // arg
                %2: i64
            bb0 // label: bb0:
                i85: %r85 = alloca i32 1 align 8 : ptr i64
                i86: %r86 = alloca i32 1 align 8 : ptr i64
                i87: %r87 = bitcast %local1 to ptr i64 : ptr i64
                i88: %r88 = load %r87 align 8 : i64
                i89: %r89 = bitcast %local1 to ptr i8 : ptr i8
                i90: %r90 = gep inbounds %r89 [i64 8] : ptr i8
                i91: %r91 = bitcast %r90 to ptr i64 : ptr i64
                i92: %r92 = load %r91 align 8 : i64
                i93: %r93 = add %r88, %r92 : i64
                i94: store %r93, %r86 align 8
                i95: %r95 = load %r86 align 8 : i64
                i96: %r96 = mul i64 2, %r95 : i64
                i97: store %r96, %r85 align 8
                terminator: ret %r96
        }

        fn is_square(arg0: ptr { i64, i64 }) -> i1 [cc: c, linkage: internal] {
            locals:
                %0: i1
                %1: ptr { i64, i64 } // arg
            bb0 // label: bb0:
                i98: %r98 = alloca i32 1 align 1 : ptr i1
                i99: %r99 = bitcast %local1 to ptr i64 : ptr i64
                i100: %r100 = load %r99 align 8 : i64
                i101: %r101 = bitcast %local1 to ptr i8 : ptr i8
                i102: %r102 = gep inbounds %r101 [i64 8] : ptr i8
                i103: %r103 = bitcast %r102 to ptr i64 : ptr i64
                i104: %r104 = load %r103 align 8 : i64
                i105: %r105 = eq %r100, %r104 : i1
                i106: store %r105, %r98 align 1
                terminator: ret %r105
        }

        fn main() -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: i32
                %2: { i64, i64 }
                %3: { i64, i64 }
                %4: i32
                %5: i32
                %6: void
                %7: ptr { i64, i64 }
                %8: i64
                %9: i32
                %10: i64
                %11: ptr { i64, i64 }
                %12: ptr { i64, i64 }
                %13: i32
                %14: { i64, i64 }
                %15: i32
                %16: i64
                %17: ptr { i64, i64 }
                %18: i32
                %19: i64
                %20: ptr { i64, i64 }
                %21: i32
                %22: i1
                %23: ptr { i64, i64 }
                %24: i32
            bb0 // label: bb0 // succs: [bb1]:
                i107: %r107 = call c @printf(c"=== Struct Operations ===
") : i32
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i108: %r108 = call c @new__1(i64 10, i64 20) : { i64, i64 }
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1] // succs: [bb3]:
                i109: %r109 = call c @new__1(i64 5, i64 15) : { i64, i64 }
                terminator: br bb3
            bb3 // label: bb3 // preds: [bb2] // succs: [bb4]:
                i110: %r110 = alloca i32 1 align 8 : ptr { i64, i64 }
                i111: store %r108, %r110 align 8
                i112: %r112 = bitcast %r110 to ptr i64 : ptr i64
                i113: %r113 = load %r112 align 8 : i64
                i114: %r114 = alloca i32 1 align 8 : ptr { i64, i64 }
                i115: store %r108, %r114 align 8
                i116: %r116 = bitcast %r114 to ptr i8 : ptr i8
                i117: %r117 = gep inbounds %r116 [i64 8] : ptr i8
                i118: %r118 = bitcast %r117 to ptr i64 : ptr i64
                i119: %r119 = load %r118 align 8 : i64
                i120: %r120 = call c @printf(c"p1 = (%d, %d)
", %r113, %r119) : i32
                terminator: br bb4
            bb4 // label: bb4 // preds: [bb3] // succs: [bb5]:
                i121: %r121 = alloca i32 1 align 8 : ptr { i64, i64 }
                i122: store %r109, %r121 align 8
                i123: %r123 = bitcast %r121 to ptr i64 : ptr i64
                i124: %r124 = load %r123 align 8 : i64
                i125: %r125 = alloca i32 1 align 8 : ptr { i64, i64 }
                i126: store %r109, %r125 align 8
                i127: %r127 = bitcast %r125 to ptr i8 : ptr i8
                i128: %r128 = gep inbounds %r127 [i64 8] : ptr i8
                i129: %r129 = bitcast %r128 to ptr i64 : ptr i64
                i130: %r130 = load %r129 align 8 : i64
                i131: %r131 = call c @printf(c"p2 = (%d, %d)
", %r124, %r130) : i32
                terminator: br bb5
            bb5 // label: bb5 // preds: [bb4] // succs: [bb6]:
                i132: %r132 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i133: store %r108, %r132 align 8
                i134: %r134 = alloca i32 1 align 8 : ptr i64
                i135: %r135 = sub i64 0, i64 4 : i64
                i136: store %r135, %r134 align 8
                i137: %r137 = load %r134 align 8 : i64
                i138: %r138 = call c @translate(%r132, i64 3, %r137)
                terminator: br bb6
            bb6 // label: bb6 // preds: [bb5] // succs: [bb7]:
                i139: %r139 = alloca i32 1 align 8 : ptr { i64, i64 }
                i140: store %r108, %r139 align 8
                i141: %r141 = bitcast %r139 to ptr i64 : ptr i64
                i142: %r142 = load %r141 align 8 : i64
                i143: %r143 = alloca i32 1 align 8 : ptr { i64, i64 }
                i144: store %r108, %r143 align 8
                i145: %r145 = bitcast %r143 to ptr i8 : ptr i8
                i146: %r146 = gep inbounds %r145 [i64 8] : ptr i8
                i147: %r147 = bitcast %r146 to ptr i64 : ptr i64
                i148: %r148 = load %r147 align 8 : i64
                i149: %r149 = call c @printf(c"p1 after translate = (%d, %d)
", %r142, %r148) : i32
                terminator: br bb7
            bb7 // label: bb7 // preds: [bb6] // succs: [bb8]:
                i150: %r150 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i151: store %r108, %r150 align 8
                i152: %r152 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i153: store %r109, %r152 align 8
                i154: %r154 = call c @distance2(%r150, %r152) : i64
                terminator: br bb8
            bb8 // label: bb8 // preds: [bb7] // succs: [bb9]:
                i155: %r155 = call c @printf(c"Distance²(p1, p2) = %d
", %r154) : i32
                terminator: br bb9
            bb9 // label: bb9 // preds: [bb8] // succs: [bb10]:
                i156: %r156 = call c @new__1(i64 10, i64 5) : { i64, i64 }
                terminator: br bb10
            bb10 // label: bb10 // preds: [bb9] // succs: [bb11]:
                i157: %r157 = alloca i32 1 align 8 : ptr { i64, i64 }
                i158: store %r156, %r157 align 8
                i159: %r159 = bitcast %r157 to ptr i64 : ptr i64
                i160: %r160 = load %r159 align 8 : i64
                i161: %r161 = alloca i32 1 align 8 : ptr { i64, i64 }
                i162: store %r156, %r161 align 8
                i163: %r163 = bitcast %r161 to ptr i8 : ptr i8
                i164: %r164 = gep inbounds %r163 [i64 8] : ptr i8
                i165: %r165 = bitcast %r164 to ptr i64 : ptr i64
                i166: %r166 = load %r165 align 8 : i64
                i167: %r167 = call c @printf(c"Rectangle: %d×%d
", %r160, %r166) : i32
                terminator: br bb11
            bb11 // label: bb11 // preds: [bb10] // succs: [bb12]:
                i168: %r168 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i169: store %r156, %r168 align 8
                i170: %r170 = call c @area(%r168) : i64
                terminator: br bb12
            bb12 // label: bb12 // preds: [bb11] // succs: [bb13]:
                i171: %r171 = call c @printf(c"  area = %d
", %r170) : i32
                terminator: br bb13
            bb13 // label: bb13 // preds: [bb12] // succs: [bb14]:
                i172: %r172 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i173: store %r156, %r172 align 8
                i174: %r174 = call c @perimeter(%r172) : i64
                terminator: br bb14
            bb14 // label: bb14 // preds: [bb13] // succs: [bb15]:
                i175: %r175 = call c @printf(c"  perimeter = %d
", %r174) : i32
                terminator: br bb15
            bb15 // label: bb15 // preds: [bb14] // succs: [bb16]:
                i176: %r176 = alloca i32 1 align 8 : ptr ptr { i64, i64 }
                i177: store %r156, %r176 align 8
                i178: %r178 = call c @is_square(%r176) : i1
                terminator: br bb16
            bb16 // label: bb16 // preds: [bb15] // succs: [bb17]:
                i179: %r179 = zext %r178 to i32 : i32
                i180: %r180 = call c @printf(c"  is_square = %d
", %r179) : i32
                terminator: br bb17
            bb17 // label: bb17 // preds: [bb16]:
                terminator: ret void
        }
}
