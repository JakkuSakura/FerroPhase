Import(ItemImport { visibility: Private, tree: Path(ItemImportPath { segments: [Ident(#std), Ident(#fmt), Ident(#Display)] }) })
Import(ItemImport { visibility: Private, tree: Path(ItemImportPath { segments: [Ident(#std), Ident(#ops), Ident(#Add)] }) })
fn apply -> Some(Unit(TypeUnit))
  Parameters:
    a: T

    b: T

    op: fn (T , T) -> T

  Body:
    Block : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Unknown(TypeUnknown)), kind: Invoke(ExprInvoke { target: Function(#op), args: [Expr { ty: Some(Unknown(TypeUnknown)), kind: Locator(#a) }, Expr { ty: Some(Unknown(TypeUnknown)), kind: Locator(#b) }] }) }], kwargs: [] } } }) : ()

fn add -> Some(Expr(Expr { ty: None, kind: Locator(#T) }))
  Parameters:
    a: T

    b: T

  Body:
    BinOp(ExprBinOp { kind: Add, lhs: Expr { ty: Some(Unknown(TypeUnknown)), kind: Locator(#a) }, rhs: Expr { ty: Some(Unknown(TypeUnknown)), kind: Locator(#b) } }) : _

fn apply_if -> Some(Primitive(Int(I64)))
  Parameters:
    cond: bool

    a: i64

    b: i64

    op: fn (i64 , i64) -> i64

  Body:
    If(ExprIf { cond: Expr { ty: Some(Primitive(Bool)), kind: Locator(#cond) }, then: Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#op), args: [Expr { ty: Some(Primitive(Int(I64))), kind: Locator(#a) }, Expr { ty: Some(Primitive(Int(I64))), kind: Locator(#b) }] }) }, elze: Some(Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 0 })) }) }) : i64

fn make_adder -> Some(ImplTraits(ImplTraits { bounds: TypeBounds { bounds: [Expr { ty: None, kind: Locator(#Fn) }] } }))
  Parameters:
    n: i64

  Body:
    Closure(ExprClosure { params: [Pattern { ty: Some(Unknown(TypeUnknown)), kind: Ident(PatternIdent { ident: #x, mutability: None }) }], ret_ty: None, movability: Some(false), body: Expr { ty: Some(Primitive(Int(I64))), kind: BinOp(ExprBinOp { kind: Add, lhs: Expr { ty: Some(Unknown(TypeUnknown)), kind: Locator(#x) }, rhs: Expr { ty: Some(Primitive(Int(I64))), kind: Locator(#n) } }) } }) : fn (i64) -> i64

fn main -> Some(Unit(TypeUnit))
  Parameters:
  Body:
    Block : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Literal("Generic operations:")], args: [], kwargs: [] } } }) : ()

      Invoke : ()

        target:
          Function(apply__spec0)
        args:
          Value(Int(ValueInt { value: 10 })) : i64

          Value(Int(ValueInt { value: 20 })) : i64

          Locator(add) : fn (_ , _) -> _

      Invoke : ()

        target:
          Function(apply__spec1)
        args:
          Value(Decimal(ValueDecimal { value: 1.5 })) : f64

          Value(Decimal(ValueDecimal { value: 2.5 })) : f64

          Locator(add) : fn (_ , _) -> _

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Literal("\nConditional:")], args: [], kwargs: [] } } }) : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#apply_if), args: [Expr { ty: Some(Primitive(Bool)), kind: Value(Bool(ValueBool { value: true })) }, Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 5 })) }, Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 3 })) }, Expr { ty: Some(Function(TypeFunction { params: [Unknown(TypeUnknown), Unknown(TypeUnknown)], generics_params: [], ret_ty: Some(Unknown(TypeUnknown)) })), kind: Locator(#add) }] }) }], kwargs: [] } } }) : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#apply_if), args: [Expr { ty: Some(Primitive(Bool)), kind: Value(Bool(ValueBool { value: false })) }, Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 5 })) }, Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 3 })) }, Expr { ty: Some(Function(TypeFunction { params: [Unknown(TypeUnknown), Unknown(TypeUnknown)], generics_params: [], ret_ty: Some(Unknown(TypeUnknown)) })), kind: Locator(#add) }] }) }], kwargs: [] } } }) : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Literal("\nClosure factory:")], args: [], kwargs: [] } } }) : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Literal("add_10(5) = "), Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#add_10), args: [Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 5 })) }] }) }], kwargs: [] } } }) : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Literal("double(7) = "), Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#double), args: [Expr { ty: Some(Primitive(Int(I64))), kind: Value(Int(ValueInt { value: 7 })) }] }) }], kwargs: [] } } }) : ()

fn apply__spec0 -> Some(Unit(TypeUnit))
  Parameters:
    a: i64

    b: i64

    op: fn (i64 , i64) -> i64

  Body:
    Block : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Int(I64))), kind: Invoke(ExprInvoke { target: Function(#op), args: [Expr { ty: Some(Primitive(Int(I64))), kind: Locator(#a) }, Expr { ty: Some(Primitive(Int(I64))), kind: Locator(#b) }] }) }], kwargs: [] } } }) : ()

fn apply__spec1 -> Some(Unit(TypeUnit))
  Parameters:
    a: f64

    b: f64

    op: fn (f64 , f64) -> f64

  Body:
    Block : ()

      IntrinsicCall(IntrinsicCall { kind: Println, payload: Format { template: ExprFormatString { parts: [Placeholder(FormatPlaceholder { arg_ref: Implicit, format_spec: None })], args: [Expr { ty: Some(Primitive(Decimal(F64))), kind: Invoke(ExprInvoke { target: Function(#op), args: [Expr { ty: Some(Primitive(Decimal(F64))), kind: Locator(#a) }, Expr { ty: Some(Primitive(Decimal(F64))), kind: Locator(#b) }] }) }], kwargs: [] } } }) : ()

