ast::File {
  items:
    priv fn main() -> () : fn() -> ()
      block (10 stmts)
        priv const FIELD_COUNT: u64
          value 3
        priv const TYPE_NAME: &string
          value "Point3D"
        priv struct Point3D {
          x: i64
          y: i64
          z: i64
        }
        impl Point3D {
          priv fn type_name() -> &'static Expr(str) : fn() -> &string
            locator TYPE_NAME
          priv fn field_count() -> u64 : fn() -> u64
            locator FIELD_COUNT
        }
        expr_stmt ;
          intrinsic println
            template: "{} has {} fields" Point3D::type_name(), Point3D::field_count()
        priv const VARIANT_A: u8
          value 1
        priv const VARIANT_B: u8
          value 2
        priv enum Tag {
          A: any = (VARIANT_A) as Expr(isize)
          B: any = (VARIANT_B) as Expr(isize)
        }
        let tag : unknown
          init:
            locator Tag::A
        expr_stmt ;
          intrinsic println
            template: "tag discriminant: {}" (tag) as u8
}
