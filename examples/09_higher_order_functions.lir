lir::Program {
    functions:
        fn __closure0_call(arg0: { i64 }, arg1: i64) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: { i64 } // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i0: %r0 = alloca i32 1 align 8 : ptr i64
                i1: %r1 = alloca i32 1 align 8 : ptr { i64 }
                i2: store %local1, %r1 align 8
                i3: %r3 = bitcast %r1 to ptr i64 : ptr i64
                i4: %r4 = load %r3 align 8 : i64
                i5: %r5 = add %local2, %r4 : i64
                i6: store %r5, %r0 align 8
                i7: %r7 = load %r0 align 8 : i64
                terminator: ret %r7
        }

        fn __closure1_call(arg0: { i8 }, arg1: i64) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: { i8 } // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i8: %r8 = alloca i32 1 align 8 : ptr i64
                i9: %r9 = mul %local2, i64 2 : i64
                i10: store %r9, %r8 align 8
                i11: %r11 = load %r8 align 8 : i64
                terminator: ret %r11
        }

        fn apply_if(arg0: i1, arg1: i64, arg2: i64, arg3: ptr fn(i64, i64) -> i64) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: i1 // arg
                %2: i64 // arg
                %3: i64 // arg
                %4: ptr fn(i64, i64) -> i64 // arg
            bb0 // label: bb0 // succs: [bb1, bb2]:
                i12: %r12 = alloca i32 1 align 8 : ptr i64
                terminator: cond_br %local1, bb1, bb2
            bb1 // label: bb1 // preds: [bb0] // succs: [bb4]:
                i13: %r13 = call c %local4(%local2, %local3) : i64
                i14: store %r13, %r12 align 8 : i64
                terminator: br bb4
            bb2 // label: bb2 // preds: [bb0] // succs: [bb3]:
                i15: store i64 0, %r12 align 8
                terminator: br bb3
            bb4 // label: bb4 // preds: [bb1] // succs: [bb3]:
                terminator: br bb3
            bb3 // label: bb3 // preds: [bb2, bb4]:
                i16: %r16 = load %r12 align 8 : i64
                terminator: ret %r16
        }

        fn make_adder(arg0: i64) -> { i64 } [cc: c, linkage: internal] {
            locals:
                %0: { i64 }
                %1: i64 // arg
            bb0 // label: bb0:
                i17: %r17 = alloca i32 1 align 8 : ptr { i64 }
                i18: %r18 = insertvalue undef { i64 }, %local1, [0] : { i64 }
                i19: store %r18, %r17 align 8
                i20: %r20 = load %r17 align 8 : { i64 }
                terminator: ret %r20
        }

        fn main() -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: i32
                %2: void
                %3: void
                %4: i32
                %5: i64
                %6: i32
                %7: i64
                %8: i32
                %9: i32
                %10: i64
                %11: { i64 }
                %12: i32
                %13: { i8 }
                %14: i64
                %15: i32
            bb0 // label: bb0 // succs: [bb1]:
                i21: %r21 = call c @printf(c"Generic operations:
") : i32
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i22: %r22 = call c @apply__spec0(i64 10, i64 20, @add__spec0)
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1] // succs: [bb3]:
                i23: %r23 = call c @apply__spec1(f64 1.5, f64 2.5, @add__spec1)
                terminator: br bb3
            bb3 // label: bb3 // preds: [bb2] // succs: [bb4]:
                i24: %r24 = call c @printf(c"
Conditional:
") : i32
                terminator: br bb4
            bb4 // label: bb4 // preds: [bb3] // succs: [bb5]:
                i25: %r25 = call c @apply_if(bool true, i64 5, i64 3, @add__spec0) : i64
                terminator: br bb5
            bb5 // label: bb5 // preds: [bb4] // succs: [bb6]:
                i26: %r26 = call c @printf(c"%d
", %r25) : i32
                terminator: br bb6
            bb6 // label: bb6 // preds: [bb5] // succs: [bb7]:
                i27: %r27 = call c @apply_if(bool false, i64 5, i64 3, @add__spec0) : i64
                terminator: br bb7
            bb7 // label: bb7 // preds: [bb6] // succs: [bb8]:
                i28: %r28 = call c @printf(c"%d
", %r27) : i32
                terminator: br bb8
            bb8 // label: bb8 // preds: [bb7] // succs: [bb9]:
                i29: %r29 = call c @printf(c"
Closure factory:
") : i32
                terminator: br bb9
            bb9 // label: bb9 // preds: [bb8] // succs: [bb10]:
                i30: %r30 = call c @make_adder(i64 10) : { i64 }
                terminator: br bb10
            bb10 // label: bb10 // preds: [bb9] // succs: [bb11]:
                i31: %r31 = call c @__closure0_call(%r30, i64 5) : i64
                terminator: br bb11
            bb11 // label: bb11 // preds: [bb10] // succs: [bb12]:
                i32: %r32 = call c @printf(c"add_10(5) = %d
", %r31) : i32
                terminator: br bb12
            bb12 // label: bb12 // preds: [bb11] // succs: [bb13]:
                i33: %r33 = alloca i32 1 align 1 : ptr { i8 }
                i34: store struct { i8 } { i8 0 }, %r33 align 1
                i35: %r35 = load %r33 align 1 : { i8 }
                i36: %r36 = call c @__closure1_call(%r35, i64 7) : i64
                terminator: br bb13
            bb13 // label: bb13 // preds: [bb12] // succs: [bb14]:
                i37: %r37 = call c @printf(c"double(7) = %d
", %r36) : i32
                terminator: br bb14
            bb14 // label: bb14 // preds: [bb13]:
                terminator: ret void
        }

        fn apply__spec0(arg0: i64, arg1: i64, arg2: ptr fn(i64, i64) -> i64) -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: i64 // arg
                %2: i64 // arg
                %3: ptr fn(i64, i64) -> i64 // arg
                %4: i64
                %5: i32
            bb0 // label: bb0 // succs: [bb1]:
                i38: %r38 = call c %local3(%local1, %local2) : i64
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i39: %r39 = call c @printf(c"%d
", %r38) : i32
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1]:
                terminator: ret void
        }

        fn add__spec0(arg0: i64, arg1: i64) -> i64 [cc: c, linkage: internal] {
            locals:
                %0: i64
                %1: i64 // arg
                %2: i64 // arg
            bb0 // label: bb0:
                i40: %r40 = alloca i32 1 align 8 : ptr i64
                i41: %r41 = add %local1, %local2 : i64
                i42: store %r41, %r40 align 8
                i43: %r43 = load %r40 align 8 : i64
                terminator: ret %r43
        }

        fn apply__spec1(arg0: f64, arg1: f64, arg2: ptr fn(f64, f64) -> f64) -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: f64 // arg
                %2: f64 // arg
                %3: ptr fn(f64, f64) -> f64 // arg
                %4: f64
                %5: i32
            bb0 // label: bb0 // succs: [bb1]:
                i44: %r44 = call c %local3(%local1, %local2) : f64
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i45: %r45 = call c @printf(c"%f
", %r44) : i32
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1]:
                terminator: ret void
        }

        fn add__spec1(arg0: f64, arg1: f64) -> f64 [cc: c, linkage: internal] {
            locals:
                %0: f64
                %1: f64 // arg
                %2: f64 // arg
            bb0 // label: bb0:
                i46: %r46 = alloca i32 1 align 8 : ptr f64
                i47: %r47 = add %local1, %local2 : f64
                i48: store %r47, %r46 align 8
                i49: %r49 = load %r46 align 8 : f64
                terminator: ret %r49
        }
}
