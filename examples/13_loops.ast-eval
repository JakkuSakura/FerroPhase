ast::File {
  items:
    priv fn factorial(n: i64) -> i64 : fn(i64) -> i64 : fn(i64) -> i64
      block (4 stmts) : i64
        let mut result : unknown
          init:
            value 1 : i64
        let mut i : unknown
          init:
            value 1 : i64
        expr_stmt (value)
          while : ()
            cond:
              binop <= : bool
                lhs:
                  locator i : i64
                rhs:
                  locator n : i64
            body:
              block (2 stmts) : ()
                expr_stmt ;
                  assign : i64
                    target:
                      locator result : i64
                    value:
                      binop * : i64
                        lhs:
                          locator result : i64
                        rhs:
                          locator i : i64
                expr_stmt ;
                  assign : i64
                    target:
                      locator i : i64
                    value:
                      binop + : i64
                        lhs:
                          locator i : i64
                        rhs:
                          value 1 : i64
        expr_stmt (value)
          locator result : i64
    priv fn sum_range(start: i64, end: i64) -> i64 : fn(i64, i64) -> i64 : fn(i64, i64) -> i64
      block (3 stmts) : i64
        let mut sum : unknown
          init:
            value 0 : i64
        expr_stmt (value)
          block (3 stmts) : ()
            let mut __fp_for_iter_0 : unknown
              init:
                locator start : i64
            let __fp_for_end_0 : unknown
              init:
                locator end : i64
            expr_stmt (value)
              loop : ()
                block (4 stmts) : ()
                  expr_stmt (value)
                    if : ()
                      cond:
                        binop >= : bool
                          lhs:
                            locator __fp_for_iter_0 : i64
                          rhs:
                            locator __fp_for_end_0 : i64
                      then:
                        block (1 stmt) : ()
                          expr_stmt ;
                            intrinsic break : ()
                              args: []
                  let i : unknown
                    init:
                      locator __fp_for_iter_0 : i64
                  expr_stmt ;
                    assign : i64
                      target:
                        locator __fp_for_iter_0 : i64
                      value:
                        binop + : i64
                          lhs:
                            locator __fp_for_iter_0 : i64
                          rhs:
                            value 1 : i64
                  expr_stmt (value)
                    block (1 stmt) : ()
                      expr_stmt ;
                        assign : i64
                          target:
                            locator sum : i64
                          value:
                            binop + : i64
                              lhs:
                                locator sum : i64
                              rhs:
                                locator i : i64
        expr_stmt (value)
          locator sum : i64
    priv fn find_first_divisor(n: i64) -> i64 : fn(i64) -> i64 : fn(i64) -> i64
      block (2 stmts) : i64
        let mut i : unknown
          init:
            value 2 : i64
        expr_stmt (value)
          loop : i64
            block (3 stmts) : ()
              expr_stmt (value)
                if : ()
                  cond:
                    binop > : bool
                      lhs:
                        binop * : i64
                          lhs:
                            locator i : i64
                          rhs:
                            locator i : i64
                      rhs:
                        locator n : i64
                  then:
                    block (1 stmt) : ()
                      expr_stmt ;
                        intrinsic break : i64
                          args:
                            locator n : i64
              expr_stmt (value)
                if : ()
                  cond:
                    binop == : bool
                      lhs:
                        binop % : i64
                          lhs:
                            locator n : i64
                          rhs:
                            locator i : i64
                      rhs:
                        value 0 : i64
                  then:
                    block (1 stmt) : ()
                      expr_stmt ;
                        intrinsic break : i64
                          args:
                            locator i : i64
              expr_stmt ;
                assign : i64
                  target:
                    locator i : i64
                  value:
                    binop + : i64
                      lhs:
                        locator i : i64
                      rhs:
                        value 1 : i64
    priv fn sum_even_numbers(limit: i64) -> i64 : fn(i64) -> i64 : fn(i64) -> i64
      block (4 stmts) : i64
        let mut sum : unknown
          init:
            value 0 : i64
        let mut i : unknown
          init:
            value 0 : i64
        expr_stmt (value)
          while : ()
            cond:
              binop < : bool
                lhs:
                  locator i : i64
                rhs:
                  locator limit : i64
            body:
              block (3 stmts) : ()
                expr_stmt ;
                  assign : i64
                    target:
                      locator i : i64
                    value:
                      binop + : i64
                        lhs:
                          locator i : i64
                        rhs:
                          value 1 : i64
                expr_stmt (value)
                  if : ()
                    cond:
                      binop != : bool
                        lhs:
                          binop % : i64
                            lhs:
                              locator i : i64
                            rhs:
                              value 2 : i64
                        rhs:
                          value 0 : i64
                    then:
                      block (1 stmt) : ()
                        expr_stmt ;
                          intrinsic continue : !
                            args: []
                expr_stmt ;
                  assign : i64
                    target:
                      locator sum : i64
                    value:
                      binop + : i64
                        lhs:
                          locator sum : i64
                        rhs:
                          locator i : i64
        expr_stmt (value)
          locator sum : i64
    priv fn main() -> () : fn() -> () : fn() -> ()
      block (20 stmts) : ()
        expr_stmt ;
          intrinsic println : ()
            template: "=== Loop Constructs ===
"
        expr_stmt ;
          intrinsic println : ()
            template: "1. While loop - factorial:"
        expr_stmt ;
          intrinsic println : ()
            template: "  5! = {}" factorial(5)
        expr_stmt ;
          intrinsic println : ()
            template: "  7! = {}" factorial(7)
        expr_stmt ;
          intrinsic println : ()
            template: "
2. For loop - sum range:"
        expr_stmt ;
          intrinsic println : ()
            template: "  sum(1..10) = {}" sum_range(1, 10)
        expr_stmt ;
          intrinsic println : ()
            template: "  sum(5..15) = {}" sum_range(5, 15)
        expr_stmt ;
          intrinsic println : ()
            template: "
3. Loop with break expression:"
        expr_stmt ;
          intrinsic println : ()
            template: "  First divisor of 24: {}" find_first_divisor(24)
        expr_stmt ;
          intrinsic println : ()
            template: "  First divisor of 17: {}" find_first_divisor(17)
        expr_stmt ;
          intrinsic println : ()
            template: "
4. Loop with continue:"
        expr_stmt ;
          intrinsic println : ()
            template: "  Sum of even numbers < 10: {}" sum_even_numbers(10)
        expr_stmt ;
          intrinsic println : ()
            template: "
5. Nested loops:"
        let mut count : unknown
          init:
            value 0 : i64
        expr_stmt (value)
          block (3 stmts) : ()
            let mut __fp_for_iter_1 : unknown
              init:
                value 1 : i64
            let __fp_for_end_1 : unknown
              init:
                value 4 : i64
            expr_stmt (value)
              loop : ()
                block (4 stmts) : ()
                  expr_stmt (value)
                    if : ()
                      cond:
                        binop >= : bool
                          lhs:
                            locator __fp_for_iter_1 : i64
                          rhs:
                            locator __fp_for_end_1 : i64
                      then:
                        block (1 stmt) : ()
                          expr_stmt ;
                            intrinsic break : ()
                              args: []
                  let i : unknown
                    init:
                      locator __fp_for_iter_1 : i64
                  expr_stmt ;
                    assign : i64
                      target:
                        locator __fp_for_iter_1 : i64
                      value:
                        binop + : i64
                          lhs:
                            locator __fp_for_iter_1 : i64
                          rhs:
                            value 1 : i64
                  expr_stmt (value)
                    block (3 stmts) : ()
                      let mut __fp_for_iter_2 : unknown
                        init:
                          value 1 : i64
                      let __fp_for_end_2 : unknown
                        init:
                          value 4 : i64
                      expr_stmt (value)
                        loop : ()
                          block (4 stmts) : ()
                            expr_stmt (value)
                              if : ()
                                cond:
                                  binop >= : bool
                                    lhs:
                                      locator __fp_for_iter_2 : i64
                                    rhs:
                                      locator __fp_for_end_2 : i64
                                then:
                                  block (1 stmt) : ()
                                    expr_stmt ;
                                      intrinsic break : ()
                                        args: []
                            let j : unknown
                              init:
                                locator __fp_for_iter_2 : i64
                            expr_stmt ;
                              assign : i64
                                target:
                                  locator __fp_for_iter_2 : i64
                                value:
                                  binop + : i64
                                    lhs:
                                      locator __fp_for_iter_2 : i64
                                    rhs:
                                      value 1 : i64
                            expr_stmt (value)
                              block (2 stmts) : ()
                                expr_stmt ;
                                  assign : i64
                                    target:
                                      locator count : i64
                                    value:
                                      binop + : i64
                                        lhs:
                                          locator count : i64
                                        rhs:
                                          value 1 : i64
                                expr_stmt (value)
                                  if : ()
                                    cond:
                                      binop == : bool
                                        lhs:
                                          locator i : i64
                                        rhs:
                                          locator j : i64
                                    then:
                                      block (1 stmt) : ()
                                        expr_stmt ;
                                          intrinsic print : ()
                                            template: "[{}] " i
        expr_stmt ;
          intrinsic println : ()
            template: "
  Iterations: {}" count
        expr_stmt ;
          intrinsic println : ()
            template: "
6. Compile-time iteration (simulated):"
        priv const FACTORIAL_CONST: i64 : i64
          value 120 : _
        expr_stmt ;
          intrinsic println : ()
            template: "  const 5! = {}" FACTORIAL_CONST
        expr_stmt ;
          intrinsic println : ()
            template: "
✓ Loop constructs demonstrated!"
}
