mir::Program {
    items:
        fn new(arg0: i64, arg1: i64) -> (i64, i64) [body: body0]

        fn translate(arg0: <??>, arg1: i64, arg2: i64) -> () [body: body1]

        fn distance2(arg0: <??>, arg1: <??>) -> i64 [body: body2]

        fn new(arg0: i64, arg1: i64) -> (i64, i64) [body: body3]

        fn area(arg0: <??>) -> i64 [body: body4]

        fn perimeter(arg0: <??>) -> i64 [body: body5]

        fn is_square(arg0: <??>) -> bool [body: body6]

        fn main() -> () [body: body7]
    bodies:
        body0 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: (i64, i64)
                _1: i64
                _2: i64
            blocks:
                bb0:
                    s0: _0 = aggregate(tuple; [copy _1, copy _2])
                    terminator: return
        body1 { arg_count: 3, locals: 4 }
            return_local: _0
            locals:
                _0: ()
                _1: <??>
                _2: i64
                _3: i64
            blocks:
                bb0:
                    s0: _1[Deref, Field(0, Ty { kind: Int(I64) })] = Add(copy _1[Deref, Field(0, Ty { kind: Int(I64) })], copy _2)
                    s1: _1[Deref, Field(1, Ty { kind: Int(I64) })] = Add(copy _1[Deref, Field(1, Ty { kind: Int(I64) })], copy _3)
                    terminator: return
        body2 { arg_count: 2, locals: 12 }
            return_local: _0
            locals:
                _0: i64
                _1: <??>
                _2: <??>
                _3: i64
                _4: i64
                _5: i64
                _6: i64
                _7: i64
                _8: i64
                _9: i64
                _10: i64
                _11: i64
            blocks:
                bb0:
                    s0: _4 = Sub(copy _1[Deref, Field(0, Ty { kind: Int(I64) })], copy _2[Deref, Field(0, Ty { kind: Int(I64) })])
                    s1: _3 = copy _4
                    s2: _6 = Sub(copy _1[Deref, Field(1, Ty { kind: Int(I64) })], copy _2[Deref, Field(1, Ty { kind: Int(I64) })])
                    s3: _5 = copy _6
                    s4: _8 = Mul(copy _3, copy _3)
                    s5: _9 = Mul(copy _5, copy _5)
                    s6: _7 = Add(copy _8, copy _9)
                    s7: _10 = Mul(copy _3, copy _3)
                    s8: _11 = Mul(copy _5, copy _5)
                    s9: _0 = Add(copy _10, copy _11)
                    terminator: return
        body3 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: (i64, i64)
                _1: i64
                _2: i64
            blocks:
                bb0:
                    s0: _0 = aggregate(tuple; [copy _1, copy _2])
                    terminator: return
        body4 { arg_count: 1, locals: 2 }
            return_local: _0
            locals:
                _0: i64
                _1: <??>
            blocks:
                bb0:
                    s0: _0 = Mul(copy _1[Deref, Field(0, Ty { kind: Int(I64) })], copy _1[Deref, Field(1, Ty { kind: Int(I64) })])
                    terminator: return
        body5 { arg_count: 1, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: <??>
                _2: i64
            blocks:
                bb0:
                    s0: _2 = Add(copy _1[Deref, Field(0, Ty { kind: Int(I64) })], copy _1[Deref, Field(1, Ty { kind: Int(I64) })])
                    s1: _0 = Mul(2, copy _2)
                    terminator: return
        body6 { arg_count: 1, locals: 2 }
            return_local: _0
            locals:
                _0: bool
                _1: <??>
            blocks:
                bb0:
                    s0: _0 = Eq(copy _1[Deref, Field(0, Ty { kind: Int(I64) })], copy _1[Deref, Field(1, Ty { kind: Int(I64) })])
                    terminator: return
        body7 { arg_count: 0, locals: 25 }
            return_local: _0
            locals:
                _0: ()
                _1: i32
                _2: (i64, i64)
                _3: (i64, i64)
                _4: i32
                _5: i32
                _6: ()
                _7: <??>
                _8: i64
                _9: i32
                _10: i64
                _11: <??>
                _12: <??>
                _13: i32
                _14: (i64, i64)
                _15: i32
                _16: i64
                _17: <??>
                _18: i32
                _19: i64
                _20: <??>
                _21: i32
                _22: bool
                _23: <??>
                _24: i32
            blocks:
                bb0:
                    terminator: call global printf("=== Struct Operations ===\n") -> _1 then bb1
                bb1:
                    terminator: call fn new(10, 20) -> _2 then bb2
                bb2:
                    terminator: call fn new(5, 15) -> _3 then bb3
                bb3:
                    terminator: call global printf("p1 = (%d, %d)\n", copy _2[Field(0, Ty { kind: Int(I64) })], copy _2[Field(1, Ty { kind: Int(I64) })]) -> _4 then bb4
                bb4:
                    terminator: call global printf("p2 = (%d, %d)\n", copy _3[Field(0, Ty { kind: Int(I64) })], copy _3[Field(1, Ty { kind: Int(I64) })]) -> _5 then bb5
                bb5:
                    s0: _7 = ref(Shared, _2)
                    s1: _8 = Neg(4)
                    terminator: call fn translate(copy _7, 3, copy _8) -> _6 then bb6
                bb6:
                    terminator: call global printf("p1 after translate = (%d, %d)\n", copy _2[Field(0, Ty { kind: Int(I64) })], copy _2[Field(1, Ty { kind: Int(I64) })]) -> _9 then bb7
                bb7:
                    s0: _11 = ref(Shared, _2)
                    s1: _12 = ref(Shared, _3)
                    terminator: call fn distance2(copy _11, copy _12) -> _10 then bb8
                bb8:
                    terminator: call global printf("Distance²(p1, p2) = %d\n", copy _10) -> _13 then bb9
                bb9:
                    terminator: call fn new(10, 5) -> _14 then bb10
                bb10:
                    terminator: call global printf("Rectangle: %d×%d\n", copy _14[Field(0, Ty { kind: Int(I64) })], copy _14[Field(1, Ty { kind: Int(I64) })]) -> _15 then bb11
                bb11:
                    s0: _17 = ref(Shared, _14)
                    terminator: call fn area(copy _17) -> _16 then bb12
                bb12:
                    terminator: call global printf("  area = %d\n", copy _16) -> _18 then bb13
                bb13:
                    s0: _20 = ref(Shared, _14)
                    terminator: call fn perimeter(copy _20) -> _19 then bb14
                bb14:
                    terminator: call global printf("  perimeter = %d\n", copy _19) -> _21 then bb15
                bb15:
                    s0: _23 = ref(Shared, _14)
                    terminator: call fn is_square(copy _23) -> _22 then bb16
                bb16:
                    terminator: call global printf("  is_square = %d\n", copy _22) -> _24 then bb17
                bb17:
                    terminator: return
}
