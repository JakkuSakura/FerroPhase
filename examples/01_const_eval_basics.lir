lir::Program {
    functions:
        fn main() -> i32 [cc: c, linkage: internal] {
            locals:
                %0: i32
                %1: i64
                %2: i32
                %3: i64
                %4: i64
                %5: i1
                %6: i32
                %7: i64
                %8: i64
                %9: i32
                %10: i64
                %11: i64
                %12: i64
                %13: i64
                %14: i64
                %15: i64
                %16: i1
                %17: i1
                %18: i32
                %19: i64
                %20: i64
                %21: void
                %22: i64
                %23: void
                %24: i64
                %25: i64
                %26: void
                %27: void
                %28: void
                %29: void
            bb0 // label: bb0 // succs: [bb1, bb2]:
                i0: %r0 = alloca i32 1 align 4 : ptr i32
                i1: %r1 = alloca i32 1 align 4 : ptr i32
                i2: %r2 = alloca i32 1 align 8 : ptr i64
                i3: store i64 4096, %r2 align 8
                i4: %r4 = alloca i32 1 align 8 : ptr i64
                i5: %r5 = load %r2 align 8 : i64
                i6: store %r5, %r4 align 8
                i7: %r7 = alloca i32 1 align 4 : ptr i32
                i8: store i64 150, %r7 align 4
                i9: %r9 = alloca i32 1 align 4 : ptr i32
                i10: %r10 = load %r7 align 4 : i32
                i11: store %r10, %r9 align 4
                i12: %r12 = alloca i32 1 align 8 : ptr i64
                i13: store i64 30000, %r12 align 8
                i14: %r14 = alloca i32 1 align 8 : ptr i64
                i15: %r15 = load %r12 align 8 : i64
                i16: store %r15, %r14 align 8
                i17: %r17 = alloca i32 1 align 8 : ptr i64
                i18: store i64 120, %r17 align 8
                i19: %r19 = alloca i32 1 align 8 : ptr i64
                i20: %r20 = load %r17 align 8 : i64
                i21: store %r20, %r19 align 8
                i22: %r22 = alloca i32 1 align 8 : ptr i64
                i23: store i64 1, %r22 align 8
                i24: %r24 = alloca i32 1 align 8 : ptr i64
                i25: %r25 = load %r4 align 8 : i64
                i26: %r26 = load %r22 align 8 : i64
                i27: %r27 = sub %r25, %r26 : i64
                i28: store %r27, %r24 align 8
                i29: %r29 = alloca i32 1 align 8 : ptr i64
                i30: %r30 = load %r4 align 8 : i64
                i31: %r31 = load %r24 align 8 : i64
                i32: %r32 = and %r30, %r31 : i64
                i33: store %r32, %r29 align 8
                i34: %r34 = alloca i32 1 align 8 : ptr i64
                i35: store i64 0, %r34 align 8
                i36: %r36 = alloca i32 1 align 1 : ptr i1
                i37: %r37 = load %r29 align 8 : i64
                i38: %r38 = load %r34 align 8 : i64
                i39: %r39 = eq %r37, %r38 : i1
                i40: store %r39, %r36 align 1
                i41: %r41 = alloca i32 1 align 1 : ptr i1
                i42: %r42 = load %r36 align 1 : i1
                i43: store %r42, %r41 align 1
                i44: %r44 = alloca i32 1 align 1 : ptr i1
                i45: %r45 = load %r44 align 1 : i1
                terminator: cond_br %r45, bb1, bb2
            bb1 // label: bb1 // preds: [bb0] // succs: [bb3]:
                i46: %r46 = alloca i32 1 align 8 : ptr i64
                i47: store i64 2, %r46 align 8
                i48: %r48 = load %r46 align 8 : i64
                i49: store %r48, %r0 align 4
                terminator: br bb3
            bb2 // label: bb2 // preds: [bb0] // succs: [bb3]:
                i50: %r50 = alloca i32 1 align 8 : ptr i64
                i51: store i64 0, %r50 align 8
                i52: %r52 = load %r50 align 8 : i64
                i53: store %r52, %r0 align 4
                terminator: br bb3
            bb3 // label: bb3 // preds: [bb1, bb2] // succs: [bb4]:
                i54: %r54 = alloca i32 1 align 4 : ptr i32
                i55: %r55 = load %r0 align 4 : i32
                i56: store %r55, %r54 align 4
                i57: %r57 = alloca i32 1 align 8 : ptr i64
                i58: store i64 0, %r57 align 8
                i59: %r59 = alloca i32 1 align 8 : ptr i64
                i60: %r60 = load %r57 align 8 : i64
                i61: store %r60, %r59 align 8
                i62: %r62 = alloca i32 1 align 8 : ptr i64
                i63: store i64 1024, %r62 align 8
                i64: %r64 = alloca i32 1 align 8 : ptr i64
                i65: %r65 = load %r4 align 8 : i64
                i66: %r66 = load %r62 align 8 : i64
                i67: %r67 = div %r65, %r66 : i64
                i68: store %r67, %r64 align 8
                i69: %r69 = load %r64 align 8 : i64
                i70: %r70 = load %r9 align 4 : i32
                i71: %r71 = load %r14 align 8 : i64
                i72: %r72 = load %r54 align 4 : i32
                i73: %r73 = call c @printf(c"Config: buffer=%lluKB, connections=%d, timeout=%llums, debug=%d
", %r69, %r70, %r71, %r72)
                terminator: br bb4
            bb4 // label: bb4 // preds: [bb3] // succs: [bb5]:
                i74: %r74 = load %r19 align 8 : i64
                i75: %r75 = load %r41 align 1 : i1
                i76: %r76 = call c @printf(c"Computed: factorial=%lld, is_pow2=%d
", %r74, %r75)
                terminator: br bb5
            bb5 // label: bb5 // preds: [bb4]:
                i77: store i32 0, %r1 align 4
                terminator: ret i32 0
        }
}
