mir::Program {
    items:
        fn main() -> () [body: body0]
    bodies:
        body0 { arg_count: 0, locals: 25 }
            return_local: _0
            locals:
                _0: ()
                _1: i32
                _2: i32
                _3: i32
                _4: i32
                _5: i32
                _6: i32
                _7: i32
                _8: i32
                _9: i32
                _10: i32
                _11: i32
                _12: (f64, f64)
                _13: (u8, u8, u8)
                _14: i32
                _15: u64
                _16: i32
                _17: u64
                _18: i32
                _19: u64
                _20: i32
                _21: i32
                _22: i32
                _23: i32
                _24: i32
            blocks:
                bb0:
                    terminator: call global printf("=== Struct Introspection ===\n") -> _1 then bb1
                bb1:
                    terminator: call global printf("Point size: %d bytes\n", 16u) -> _2 then bb2
                bb2:
                    terminator: call global printf("Color size: %d bytes\n", 3u) -> _3 then bb3
                bb3:
                    terminator: call global printf("Point fields: %d\n", 2u) -> _4 then bb4
                bb4:
                    terminator: call global printf("Color fields: %d\n", 3u) -> _5 then bb5
                bb5:
                    terminator: call global printf("Point has x: %d\n", true) -> _6 then bb6
                bb6:
                    terminator: call global printf("Point has z: %d\n", false) -> _7 then bb7
                bb7:
                    terminator: call global printf("Point methods: %d\n", 0u) -> _8 then bb8
                bb8:
                    terminator: call global printf("Color methods: %d\n", 0u) -> _9 then bb9
                bb9:
                    terminator: call global printf("\nâœ“ Introspection completed!\n") -> _10 then bb10
                bb10:
                    terminator: call global printf("\n=== Transpilation Demo ===\n") -> _11 then bb11
                bb11:
                    s0: _12 = aggregate(tuple; [0, 0])
                    s1: _13 = aggregate(tuple; [255u, 0u, 0u])
                    terminator: call global printf("Transpilation target sizes:\n") -> _14 then bb12
                bb12:
                    s0: _15 = 16u
                    terminator: call global printf("  Point: %d bytes (const)\n", copy _15) -> _16 then bb13
                bb13:
                    s0: _17 = 24u
                    terminator: call global printf("  Color: %d bytes (const)\n", copy _17) -> _18 then bb14
                bb14:
                    s0: _19 = 40u
                    terminator: call global printf("  Combined: %d bytes\n", copy _19) -> _20 then bb15
                bb15:
                    terminator: call global printf("Runtime instances:\n") -> _21 then bb16
                bb16:
                    terminator: call global printf("  Origin: (%f, %f)\n", copy _12[Field(0, Ty { kind: Float(F64) })], copy _12[Field(1, Ty { kind: Float(F64) })]) -> _22 then bb17
                bb17:
                    terminator: call global printf("  Red: rgb(%d, %d, %d)\n", copy _13[Field(0, Ty { kind: Uint(U8) })], copy _13[Field(1, Ty { kind: Uint(U8) })], copy _13[Field(2, Ty { kind: Uint(U8) })]) -> _23 then bb18
                bb18:
                    terminator: call global printf("\nâœ“ Introspection enables external code generation!\n") -> _24 then bb19
                bb19:
                    terminator: return
}
