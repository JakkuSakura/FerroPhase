hir::Program {
    fn main() -> () {
        {
            struct Point {
                pub x: f64,
                pub y: f64,
            }
            struct Color {
                pub r: u8,
                pub g: u8,
                pub b: u8,
            }
            const POINT_SIZE: usize =
                std::SizeOf(1 args);
            const COLOR_SIZE: usize =
                std::SizeOf(1 args);
            const POINT_FIELDS: usize =
                std::FieldCount(1 args);
            const COLOR_FIELDS: usize =
                std::FieldCount(1 args);
            const POINT_HAS_X: bool =
                std::HasField(2 args);
            const POINT_HAS_Z: bool =
                std::HasField(2 args);
            const POINT_METHODS: usize =
                std::MethodCount(1 args);
            const COLOR_METHODS: usize =
                std::MethodCount(1 args);
            std::Println(0 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(0 args);
            std::Println(0 args);
            const POINT_SIZE_CONST: usize =
                std::SizeOf(1 args);
            const COLOR_SIZE_CONST: usize =
                std::SizeOf(1 args);
            const TOTAL_SIZE: usize =
                (POINT_SIZE_CONST + COLOR_SIZE_CONST);
            let origin = Point { x: 0, y: 0 };
            let red = Color { r: 255, g: 0, b: 0 };
            std::Println(0 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(1 args);
            std::Println(0 args);
            std::Println(2 args);
            std::Println(3 args);
            std::Println(0 args);
        }
    }
}
