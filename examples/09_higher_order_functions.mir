mir::Program {
    items:
        fn __closure0_call(arg0: (i64), arg1: i64) -> i64 [body: body0]

        fn __closure1_call(arg0: (i8), arg1: i64) -> i64 [body: body1]

        fn apply_if(arg0: bool, arg1: i64, arg2: i64, arg3: <??>) -> i64 [body: body2]

        fn make_adder(arg0: i64) -> (i64) [body: body3]

        fn main() -> () [body: body4]

        fn apply__spec0(arg0: i64, arg1: i64, arg2: <??>) -> () [body: body5]

        fn add__spec0(arg0: i64, arg1: i64) -> i64 [body: body6]

        fn apply__spec1(arg0: f64, arg1: f64, arg2: <??>) -> () [body: body7]

        fn add__spec1(arg0: f64, arg1: f64) -> f64 [body: body8]
    bodies:
        body0 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: (i64)
                _2: i64
            blocks:
                bb0:
                    s0: _0 = Add(copy _2, copy _1[Field(0, Ty { kind: Int(I64) })])
                    terminator: return
        body1 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: (i8)
                _2: i64
            blocks:
                bb0:
                    s0: _0 = Mul(copy _2, 2)
                    terminator: return
        body2 { arg_count: 4, locals: 5 }
            return_local: _0
            locals:
                _0: i64
                _1: bool
                _2: i64
                _3: i64
                _4: <??>
            blocks:
                bb0:
                    terminator: switch copy _1 [1 -> bb1] otherwise -> bb2
                bb1:
                    terminator: call copy _4(copy _2, copy _3) -> _0 then bb4
                bb2:
                    s0: _0 = 0
                    terminator: goto -> bb3
                bb3:
                    terminator: <none>
                bb4:
                    terminator: goto -> bb3
        body3 { arg_count: 1, locals: 2 }
            return_local: _0
            locals:
                _0: (i64)
                _1: i64
            blocks:
                bb0:
                    s0: _0 = aggregate(tuple; [copy _1])
                    terminator: return
        body4 { arg_count: 0, locals: 16 }
            return_local: _0
            locals:
                _0: ()
                _1: i32
                _2: ()
                _3: ()
                _4: i32
                _5: i64
                _6: i32
                _7: i64
                _8: i32
                _9: i32
                _10: i64
                _11: (i64)
                _12: i32
                _13: (i8)
                _14: i64
                _15: i32
            blocks:
                bb0:
                    terminator: call global printf("Generic operations:\n") -> _1 then bb1
                bb1:
                    terminator: call fn apply__spec0(10, 20, fn add__spec0) -> _2 then bb2
                bb2:
                    terminator: call fn apply__spec1(1.5, 2.5, fn add__spec1) -> _3 then bb3
                bb3:
                    terminator: call global printf("\nConditional:\n") -> _4 then bb4
                bb4:
                    terminator: call fn apply_if(true, 5, 3, fn add__spec0) -> _5 then bb5
                bb5:
                    terminator: call global printf("%d\n", copy _5) -> _6 then bb6
                bb6:
                    terminator: call fn apply_if(false, 5, 3, fn add__spec0) -> _7 then bb7
                bb7:
                    terminator: call global printf("%d\n", copy _7) -> _8 then bb8
                bb8:
                    terminator: call global printf("\nClosure factory:\n") -> _9 then bb9
                bb9:
                    terminator: call fn make_adder(10) -> _11 then bb10
                bb10:
                    terminator: call fn __closure0_call(copy _11, 5) -> _10 then bb11
                bb11:
                    terminator: call global printf("add_10(5) = %d\n", copy _10) -> _12 then bb12
                bb12:
                    s0: _13 = aggregate(tuple; [0])
                    terminator: call fn __closure1_call(copy _13, 7) -> _14 then bb13
                bb13:
                    terminator: call global printf("double(7) = %d\n", copy _14) -> _15 then bb14
                bb14:
                    terminator: return
        body5 { arg_count: 3, locals: 6 }
            return_local: _0
            locals:
                _0: ()
                _1: i64
                _2: i64
                _3: <??>
                _4: i64
                _5: i32
            blocks:
                bb0:
                    terminator: call copy _3(copy _1, copy _2) -> _4 then bb1
                bb1:
                    terminator: call global printf("%d\n", copy _4) -> _5 then bb2
                bb2:
                    terminator: return
        body6 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: i64
                _2: i64
            blocks:
                bb0:
                    s0: _0 = Add(copy _1, copy _2)
                    terminator: return
        body7 { arg_count: 3, locals: 6 }
            return_local: _0
            locals:
                _0: ()
                _1: f64
                _2: f64
                _3: <??>
                _4: f64
                _5: i32
            blocks:
                bb0:
                    terminator: call copy _3(copy _1, copy _2) -> _4 then bb1
                bb1:
                    terminator: call global printf("%f\n", copy _4) -> _5 then bb2
                bb2:
                    terminator: return
        body8 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: f64
                _1: f64
                _2: f64
            blocks:
                bb0:
                    s0: _0 = Add(copy _1, copy _2)
                    terminator: return
}
