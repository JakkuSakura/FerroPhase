mir::Program {
    items:
        fn add(arg0: i64, arg1: i64) -> i64 [body: body0]

        fn double(arg0: i64) -> i64 [body: body1]

        fn compose(arg0: i64) -> i64 [body: body2]

        fn main() -> () [body: body3]
    bodies:
        body0 { arg_count: 2, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: i64
                _2: i64
            blocks:
                bb0:
                    s0: _0 = Add(copy _1, copy _2)
                    terminator: return
        body1 { arg_count: 1, locals: 2 }
            return_local: _0
            locals:
                _0: i64
                _1: i64
            blocks:
                bb0:
                    s0: _0 = Mul(copy _1, 2)
                    terminator: return
        body2 { arg_count: 1, locals: 3 }
            return_local: _0
            locals:
                _0: i64
                _1: i64
                _2: i64
            blocks:
                bb0:
                    terminator: call fn add(copy _1, 1) -> _2 then bb1
                bb1:
                    terminator: call fn double(copy _2) -> _0 then bb2
                bb2:
                    terminator: return
        body3 { arg_count: 0, locals: 9 }
            return_local: _0
            locals:
                _0: ()
                _1: i64
                _2: i32
                _3: i64
                _4: i32
                _5: i64
                _6: i32
                _7: i64
                _8: i32
            blocks:
                bb0:
                    terminator: call fn add(2, 3) -> _1 then bb1
                bb1:
                    terminator: call global printf("%d\n", copy _1) -> _2 then bb2
                bb2:
                    terminator: call fn double(5) -> _3 then bb3
                bb3:
                    terminator: call global printf("%d\n", copy _3) -> _4 then bb4
                bb4:
                    terminator: call fn compose(10) -> _5 then bb5
                bb5:
                    terminator: call global printf("%d\n", copy _5) -> _6 then bb6
                bb6:
                    s0: _7 = 30
                    terminator: call global printf("const: %d\n", copy _7) -> _8 then bb7
                bb7:
                    terminator: return
}
