fn add__i64 (a : i64 , b : i64) -> i64{
    a + b
}
fn apply__i64_op_add__i64 (a : i64 , b : i64) -> (){
    println ! ("{}" , add__i64 (a , b)) ;
}
fn add__f64 (a : f64 , b : f64) -> f64{
    a + b
}
fn apply__f64_op_add__f64 (a : f64 , b : f64) -> (){
    println ! ("{}" , add__f64 (a , b)) ;
}
fn apply_if__op_add__i64 (cond : bool , a : i64 , b : i64) -> i64{
    if cond{
        add__i64 (a , b)
    }
    else 0
}
use std :: fmt :: Display ;
use std :: ops :: Add ;
fn apply < T : Add + Display > (a : T , b : T , op : fn (T , T) -> T) -> () ;
fn add < T : Add > (a : T , b : T) -> T ;
fn apply_if (cond : bool , a : i64 , b : i64 , op : fn (i64 , i64) -> i64) -> i64 ;
fn make_adder (n : i64) -> impl Fn{
    | x | x + n
}
fn main () -> (){
    println ! ("Generic operations:") ;
    apply__i64_op_add__i64 (10 , 20) ;
    apply__f64_op_add__f64 (1.5 , 2.5) ;
    println ! ("\nConditional:") ;
    println ! ("{}" , apply_if__op_add__i64 (true , 5 , 3)) ;
    println ! ("{}" , apply_if__op_add__i64 (false , 5 , 3)) ;
    println ! ("\nClosure factory:") ;
    const add_10 : fn (i64) -> i64 = make_adder (10) ;
    println ! ("add_10(5) = {}" , add_10 (5)) ;
    let double = | x | x * 2 ;
    println ! ("double(7) = {}" , double (7)) ;
}