ast::File {
  items:
    priv struct __Closure0 : __Closure0{n: i64} {
      n: i64
    }
    priv fn __closure0_call(__env: __Closure0{n: i64}, x: i64) -> i64 : fn(__Closure0{n: i64}, i64) -> i64 : _
      binop + : i64
        lhs:
          locator x : unknown
        rhs:
          select .n [field] : i64
            object:
              locator __env : __Closure0{n: i64}
    priv struct __Closure1 : __Closure1{__fp_no_capture: i8} {
      __fp_no_capture: i8
    }
    priv fn __closure1_call(__env: __Closure1{__fp_no_capture: i8}, x: i64) -> i64 : fn(__Closure1{__fp_no_capture: i8}, i64) -> i64 : _
      binop * : i64
        lhs:
          locator x : unknown
        rhs:
          value 2 : i64
    declare fn printf(fmt: string, *args: any) -> () : fn(string, any) -> () : fn(string, any) -> ()
    priv import std::fmt::Display : ()
    priv import std::ops::Add : ()
    priv fn apply_if(cond: Expr(bool), a: i64, b: i64, op: fn(i64, i64) -> i64) -> i64 : fn(bool, i64, i64, fn(i64, i64) -> i64) -> i64 : fn(bool, i64, i64, fn(i64, i64) -> i64) -> i64
      if : i64
        cond:
          locator cond : bool
        then:
          invoke : i64
            target: op
            args:
              locator a : i64
              locator b : i64
        else:
          value 0 : i64
    priv fn make_adder(n: i64) -> __Closure0{n: i64} : fn(i64) -> __Closure0{n: i64} : fn(i64) -> fn(i64) -> i64
      struct __Closure0 : __Closure0{n: i64}
        n:
          locator n : i64
    priv fn main() -> () : fn() -> () : fn() -> ()
      block (11 stmts) : ()
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "Generic operations:
" : &string
        expr_stmt ;
          invoke : ()
            target: apply__spec0
            args:
              value 10 : i64
              value 20 : i64
              locator add__spec0 : fn(i64, i64) -> i64
        expr_stmt ;
          invoke : ()
            target: apply__spec1
            args:
              value 1.5 : f64
              value 2.5 : f64
              locator add__spec1 : fn(f64, f64) -> f64
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "
Conditional:
" : &string
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "%d
" : &string
              invoke : i64
                target: apply_if
                args:
                  value true : bool
                  value 5 : i64
                  value 3 : i64
                  locator add__spec0 : fn(i64, i64) -> i64
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "%d
" : &string
              invoke : i64
                target: apply_if
                args:
                  value false : bool
                  value 5 : i64
                  value 3 : i64
                  locator add__spec0 : fn(i64, i64) -> i64
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "
Closure factory:
" : &string
        priv const add_10: __Closure0{n: i64} : fn(i64) -> i64
          invoke : __Closure0{n: i64}
            target: make_adder
            args:
              value 10 : i64
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "add_10(5) = %d
" : &string
              invoke : i64
                target: __closure0_call
                args:
                  locator add_10 : __Closure0{n: i64}
                  value 5 : i64
        let double : __Closure1{__fp_no_capture: i8}
          init:
            struct __Closure1 : __Closure1{__fp_no_capture: i8}
              __fp_no_capture:
                value 0 : i8
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "double(7) = %d
" : &string
              invoke : i64
                target: __closure1_call
                args:
                  locator double : __Closure1{__fp_no_capture: i8}
                  value 7 : i64
    priv fn apply__spec0(a: i64, b: i64, op: fn(i64, i64) -> i64) -> () : fn(i64, i64, fn(i64, i64) -> i64) -> () : fn(i64, i64, fn(i64, i64) -> i64) -> ()
      block (1 stmt) : ()
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "%d
" : &string
              invoke : i64
                target: op
                args:
                  locator a : i64
                  locator b : i64
    priv fn add__spec0(a: i64, b: i64) -> i64 : fn(i64, i64) -> i64 : fn(i64, i64) -> i64
      binop + : i64
        lhs:
          locator a : i64
        rhs:
          locator b : i64
    priv fn apply__spec1(a: f64, b: f64, op: fn(f64, f64) -> f64) -> () : fn(f64, f64, fn(f64, f64) -> f64) -> () : fn(f64, f64, fn(f64, f64) -> f64) -> ()
      block (1 stmt) : ()
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "%f
" : &string
              invoke : f64
                target: op
                args:
                  locator a : f64
                  locator b : f64
    priv fn add__spec1(a: f64, b: f64) -> f64 : fn(f64, f64) -> f64 : fn(f64, f64) -> f64
      binop + : f64
        lhs:
          locator a : f64
        rhs:
          locator b : f64
}
