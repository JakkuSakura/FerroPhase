fn main () -> () { struct Point { pub x : f64 , pub y : f64 } struct Color { pub r : u8 , pub g : u8 , pub b : u8 } const POINT_SIZE : usize = 16 ; const COLOR_SIZE : usize = 24 ; const POINT_FIELDS : usize = 2 ; const COLOR_FIELDS : usize = 3 ; const POINT_HAS_X : bool = true ; const POINT_HAS_Z : bool = false ; const POINT_METHODS : usize = 0 ; const COLOR_METHODS : usize = 0 ; printf ("=== Struct Introspection ===\n" . to_string ()) ; printf ("Point size: %lld bytes\n" . to_string () , 16) ; printf ("Color size: %lld bytes\n" . to_string () , 24) ; printf ("Point fields: %lld\n" . to_string () , 2) ; printf ("Color fields: %lld\n" . to_string () , 3) ; printf ("Point has x: %d\n" . to_string () , true) ; printf ("Point has z: %d\n" . to_string () , false) ; printf ("Point methods: %lld\n" . to_string () , 0) ; printf ("Color methods: %lld\n" . to_string () , 0) ; printf ("\n✓ Introspection completed!\n" . to_string ()) ; printf ("\n=== Transpilation Demo ===\n" . to_string ()) ; const POINT_SIZE_CONST : usize = 16 ; const COLOR_SIZE_CONST : usize = 24 ; const TOTAL_SIZE : usize = 40 ; let origin = Point { x : 0 , y : 0 } ; let red = Color { r : 255 , g : 0 , b : 0 } ; printf ("Transpilation target sizes:\n" . to_string ()) ; printf ("  Point: %llu bytes (const)\n" . to_string () , POINT_SIZE_CONST) ; printf ("  Color: %llu bytes (const)\n" . to_string () , COLOR_SIZE_CONST) ; printf ("  Combined: %llu bytes\n" . to_string () , TOTAL_SIZE) ; printf ("Runtime instances:\n" . to_string ()) ; printf ("  Origin: (%f, %f)\n" . to_string () , origin . x , origin . y) ; printf ("  Red: rgb(%hhu, %hhu, %hhu)\n" . to_string () , red . r , red . g , red . b) ; printf ("\n✓ Introspection enables external code generation!\n" . to_string ()) ; }