ast::File {
  items:
    priv fn main() -> () : fn() -> () : fn() -> ()
      block (34 stmts) : ()
        priv struct Point : Point{x: f64, y: f64} {
          x: f64
          y: f64
        }
        priv struct Color : Color{r: u8, g: u8, b: u8} {
          r: u8
          g: u8
          b: u8
        }
        priv const POINT_SIZE: u64 : u64
          intrinsic size_of : u64
            args:
              locator Point : Point{x: f64, y: f64}
        priv const COLOR_SIZE: u64 : u64
          intrinsic size_of : u64
            args:
              locator Color : Color{r: u8, g: u8, b: u8}
        priv const POINT_FIELDS: u64 : u64
          intrinsic field_count : u64
            args:
              locator Point : Point{x: f64, y: f64}
        priv const COLOR_FIELDS: u64 : u64
          intrinsic field_count : u64
            args:
              locator Color : Color{r: u8, g: u8, b: u8}
        priv const POINT_HAS_X: bool : bool
          intrinsic has_field : bool
            args:
              locator Point : Point{x: f64, y: f64}
              value "x" : &string
        priv const POINT_HAS_Z: bool : bool
          intrinsic has_field : bool
            args:
              locator Point : Point{x: f64, y: f64}
              value "z" : &string
        priv const POINT_METHODS: u64 : u64
          intrinsic method_count : u64
            args:
              locator Point : Point{x: f64, y: f64}
        priv const COLOR_METHODS: u64 : u64
          intrinsic method_count : u64
            args:
              locator Color : Color{r: u8, g: u8, b: u8}
        expr_stmt ;
          intrinsic println : ()
            template: "=== Struct Introspection ==="
        expr_stmt ;
          intrinsic println : ()
            template: "Point size: {} bytes" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Color size: {} bytes" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Point fields: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Color fields: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Point has x: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Point has z: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Point methods: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "Color methods: {}" <expr>
        expr_stmt ;
          intrinsic println : ()
            template: "
✓ Introspection completed!"
        expr_stmt ;
          intrinsic println : ()
            template: "
=== Transpilation Demo ==="
        priv const POINT_SIZE_CONST: u64 : u64
          intrinsic size_of : u64
            args:
              locator Point : Point{x: f64, y: f64}
        priv const COLOR_SIZE_CONST: u64 : u64
          intrinsic size_of : u64
            args:
              locator Color : Color{r: u8, g: u8, b: u8}
        priv const TOTAL_SIZE: u64 : u64
          binop + : u64
            lhs:
              locator POINT_SIZE_CONST : u64
            rhs:
              locator COLOR_SIZE_CONST : u64
        let origin : unknown
          init:
            struct Point : Point{x: f64, y: f64}
              x:
                value 0 : f64
              y:
                value 0 : f64
        let red : unknown
          init:
            struct Color : Color{r: u8, g: u8, b: u8}
              r:
                value 255 : i64
              g:
                value 0 : i64
              b:
                value 0 : i64
        expr_stmt ;
          intrinsic println : ()
            template: "Transpilation target sizes:"
        expr_stmt ;
          intrinsic println : ()
            template: "  Point: {} bytes (const)" POINT_SIZE_CONST
        expr_stmt ;
          intrinsic println : ()
            template: "  Color: {} bytes (const)" COLOR_SIZE_CONST
        expr_stmt ;
          intrinsic println : ()
            template: "  Combined: {} bytes" TOTAL_SIZE
        expr_stmt ;
          intrinsic println : ()
            template: "Runtime instances:"
        expr_stmt ;
          intrinsic println : ()
            template: "  Origin: ({}, {})" origin.x, origin.y
        expr_stmt ;
          intrinsic println : ()
            template: "  Red: rgb({}, {}, {})" red.r, red.g, red.b
        expr_stmt ;
          intrinsic println : ()
            template: "
✓ Introspection enables external code generation!"
}
