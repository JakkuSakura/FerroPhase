lir::Program {
    functions:
        fn main() -> void [cc: c, linkage: internal] {
            locals:
                %0: void
                %1: { i64, i64 }
                %2: { i64, i64 }
                %3: i32
                %4: void
                %5: i32
            bb0 // label: bb0 // succs: [bb1]:
                i0: %r0 = alloca i32 1 align 8 : ptr { i64, i64 }
                i1: store struct { i64, i64 } { i64 100, i64 20 }, %r0 align 8
                i2: %r2 = alloca i32 1 align 8 : ptr { i64, i64 }
                i3: store struct { i64, i64 } { i64 100, i64 20 }, %r2 align 8
                i4: %r4 = bitcast %r0 to ptr i64 : ptr i64
                i5: %r5 = load %r4 align 8 : i64
                i6: %r6 = bitcast %r2 to ptr i8 : ptr i8
                i7: %r7 = gep inbounds %r6 [i64 8] : ptr i8
                i8: %r8 = bitcast %r7 to ptr i64 : ptr i64
                i9: %r9 = load %r8 align 8 : i64
                i10: %r10 = call c @printf(c"x=%d, y=%d
", %r5, %r9) : i32
                terminator: br bb1
            bb1 // label: bb1 // preds: [bb0] // succs: [bb2]:
                i11: %r11 = call c @printf(c"array size: %d
", i64 256) : i32
                terminator: br bb2
            bb2 // label: bb2 // preds: [bb1]:
                terminator: ret void
        }
}
