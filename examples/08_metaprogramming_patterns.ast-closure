ast::File {
  items:
    declare fn printf(fmt: string, *args: any) -> () : fn(string, any) -> () : fn(string, any) -> ()
    priv fn main() -> () : fn() -> () : fn() -> ()
      block (10 stmts) : ()
        priv const FIELD_COUNT: u64 : u64
          value 3 : u64
        priv const TYPE_NAME: &string : &string
          value "Point3D" : &string
        priv struct Point3D : Point3D{x: i64, y: i64, z: i64} {
          x: i64
          y: i64
          z: i64
        }
        impl Point3D : () {
          priv fn type_name() -> &'static Expr(str) : fn() -> &string : fn() -> &string
            locator TYPE_NAME : &string
          priv fn field_count() -> u64 : fn() -> u64 : fn() -> u64
            locator FIELD_COUNT : u64
        }
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "%s has %d fields
" : &string
              invoke : &string
                target: Point3D::type_name
              invoke : u64
                target: Point3D::field_count
        priv const VARIANT_A: u8 : u8
          value 1 : u8
        priv const VARIANT_B: u8 : u8
          value 2 : u8
        priv enum Tag : Tag [A: any | B: any] {
          A: any = (VARIANT_A) as Expr(isize)
          B: any = (VARIANT_B) as Expr(isize)
        }
        let tag : unknown
          init:
            locator Tag::A : Tag [A: any | B: any]
        expr_stmt ;
          invoke : ()
            target: printf
            args:
              value "tag discriminant: %d
" : &string
              cast : u8 -> u8
                locator tag : Tag [A: any | B: any]
}
